html {
    font-size: 20px;
    background-color: black;
    color: antiquewhite;
  }
  
  *,
  *:before,
   *:after {
    box-sizing: border-box;
    font-family: 'Amatic SC', cursive;

  }
  
:root {
    --dirt: url('img/dirt.svg');
}

  body {
    padding: 0;
    margin: 0;
  
  }
  
  h1 {
    text-align: center;
    font-size: 5rem;
    line-height: 1;
    margin-bottom: 0;
  }

  ul, 
  li {
    list-style-type: none;
  }

  .flex {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  header {
    flex-direction: column;
  }

  .hamburger {
    position: fixed;
    top: 5%;
    right: 2%;
    height: 27px;
    width: 35px;
    cursor: pointer;
    z-index: 100;
    transition: opacity 0.25s ease;
  }

  /* .hamburger:hover {
    opacity: 0.7;
    transform: translateX(1px) translateY(0) rotate(0deg);
  } */

  .hamburger.active .top {
    transform: translateY(11px) translateX(0) rotate(45deg);
  }

  .hamburger.active .middle {
    opacity: 0;
  }

  .hamburger.active .bottom {
    transform: translateY(-11px) translateX(0) rotate(-45deg);
  }

  .hamburger span {
    border: none;
    height: 5px;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    transition: all 0.35s ease;
    cursor: pointer;
  }

  .hamburger span:nth-of-type(2) {
    top: 11px;
  }
  .hamburger span:nth-of-type(3) {
    top: 22px;
  }

  .btn-start {
    padding: .5rem;
    font-size: 30px;
    outline: none;
    font-weight: 1000;
    color: antiquewhite;
  }


  .button,
  .hamburger {
    --background-color: black;
    --border-color: linear-gradient(to bottom right, red, green);
    --border-width: 0.5em;
    --edge-size: 0.5em;
  
    cursor: pointer;
    background: var(--background-color);
    padding: 0.5em 1.5em;
    border: 0;
    position: relative;
    isolation: isolate;
    display: inline-grid;
    place-content: center;
    clip-path: polygon(
      var(--edge-size) 0%,
      100% 0,
      100% calc(100% - var(--edge-size)),
      calc(100% - var(--edge-size)) 100%,
      0 100%,
      0% var(--edge-size)
    );
    transition: color 250ms;
  }
  .hamburger span {
    /* background: var(--border-color); */
    
    /* background: var(--border-color); */
    border: var(--border-color);
  }
  .hamburger span::before,
  button::before {
    content: "";
    position: absolute;
    inset: 0;
    background: var(--border-color);
    z-index: -2;
  }
  .hamburger span::after,
  button::after {
    content: "";
    position: absolute;
    inset: 0;
    background: var(--background-color);
    z-index: -1;
    clip-path: polygon(
   
      var(--border-width) calc(var(--edge-size) + var(--border-width) * 0.5),
   
      calc(var(--edge-size) + var(--border-width) * 0.5) var(--border-width),
      
      calc(100% - var(--border-width)) var(--border-width),
     
      calc(100% - var(--border-width))
        calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5)),
    
      calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5))
        calc(100% - var(--border-width)),
     
      calc(var(--border-width)) calc(100% - var(--border-width))
    );
    transition: clip-path 500ms;
  }

  .hamburger {
    position: fixed;
    top: 5%;
    right: 2%;
    background: var(--border-color);

  }
  .hamburger span:hover,
  button:hover {
    color: white;
  }
  
  .hamburger span:hover::after,
  button:hover::after {
  
    clip-path: polygon(
    
      calc(100% - var(--border-width))
        calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5)),
     
      calc(100% - var(--border-width)) var(--border-width),
    
      calc(100% - var(--border-width)) var(--border-width),
     
      calc(100% - var(--border-width))
        calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5)),
     
      calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5))
        calc(100% - var(--border-width)),
     
      calc(100% - calc(var(--edge-size) + var(--border-width) * 0.5))
        calc(100% - var(--border-width))
    );
  }


  .scoreboard {
    position: fixed;

    width: 100%;
    height: 0%;
    opacity: 0;
    margin-top: 2rem;
    background: linear-gradient(to bottom right, red, green);
    z-index: 10;
    transition: opacity 0.35s, visibility 0.35s, height 0.35s;
 
    visibility: hidden;

  }

  .scoreboard.open {
    opacity: 1;
    visibility: visible;
    height: 100%;
  }


  .score-list {
    flex-direction: column;
    align-items: flex-start;
    overflow-Y: scroll;
    height: 20vh;
    padding: 3rem;
  }

  .score-list li {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    gap: 2rem;
  }

  ::-webkit-scrollbar {
    width: 10px;
    height: 10px;
}
::-webkit-scrollbar-thumb {
    background-color: linear-gradient(to bottom right, red, green);
    background-image:  linear-gradient(20deg, rgb(36, 35, 35), transparent);
    border-radius: 10px;
    box-shadow: inset 4px 4px 4px hsla(0,0%,100%,.25), inset -2px -2px 2px rgba(0,0,0,.25);
    
}

::-webkit-scrollbar-track {
    background-color: transparent;
    border-radius: 10px;
}

  .wrapper {
    flex-direction: column;
    width: fit-content;
    margin: 0 auto;
    padding: 3rem;
    font-size: 30px;
    background: rgba(255,255,255,0.2);
    border-radius: 10px;
    margin-top: 1rem;
    box-shadow: inset 10px;

  }




  input {
    background-color: black;
    color: antiquewhite;
    outline: none;
    border: none;
    font-size: 35px;
  }

  
  .score {
    background: rgba(255,255,255,0.2);
    padding: 0 1.5rem;
    line-height: 1;
    border-radius: .5rem;
  }

  .score-count {
    justify-content: space-evenly;
  }

 
  .level {
    font-size: 2rem;
    text-align: center;
    flex-direction: row;
    gap: 1rem;
  }


  .level span {
    font-size: 3rem;
  }

  
  .game {
    width: 600px;
    height: 400px;
    display: flex;
    flex-wrap: wrap;
    margin: 0 auto;
  }
  
  .hole {
    flex: 1 0 33.33%;
    overflow: hidden;
    position: relative;
  }
  
  .hole::after {
    display: block;
    background: var(--dirt) top center no-repeat;
    background-size: contain;
    content: '';
    width: 100%;
    height:70px;
    position: absolute;
    z-index: 2;
    bottom: -30px;
    transition:all 0.4s;
  }
  
  .mole {
    background: url('img/mole.svg') bottom center no-repeat;
    background-size: 90%;
    position: absolute;
    top: 100%;
    width: 100%;
    height: 100%;
    transition:all 0.4s;
    cursor: grab;
    border-radius: 100px;
  }

  .mole:hover {
    animation: .2s shrinkPoki;
  }
  .mole:active {
    animation:infinite .2s spinPoki;
  }

 

  .hole.up .mole {
    top: 0;
  }


  .visible {
    display: block;
  }

  .hidden {
    display: none;
  }

  @keyframes spinPoki {
    0% {
        transform: rotate(0deg);
        background: linear-gradient(to bottom right, red, green);
    }
    100% {
        transform: rotate(90deg);
       
    }
  }

 
  @keyframes shrinkPoki {
    0% {
        transform: scale(.9);
    }

    100% {
        transform: scale(.7);
    }
  }
  
  